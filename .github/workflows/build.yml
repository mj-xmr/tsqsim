name: ci/gh-actions/cli

on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

# The below variables reduce repetitions across similar targets
env:
  REMOVE_BUNDLED_BOOST : rm -rf /usr/local/share/boost
  APT_SET_CONF: |
        echo "Acquire::Retries       \"3\";"   | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::http::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::ftp::Timeout  \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
  WIN_INSTALL_PATH: D:/a/tsqsim/tsqsim/build/default-static-release/bin

jobs:
  build-ubuntu:
    runs-on: ${{ matrix.os }}
    env:
      CCACHE_TEMPDIR: /tmp/.ccache-temp
    strategy:
      fail-fast: false
#      max-parallel: 1 # Single threaded for now, because the jobs overwrite each other's data/bin/* files?
      matrix:
        os: [ubuntu-latest] #, ubuntu-18.04] # TODO: Consider(!) supporting the previous version.
        compiler: [gcc, clang]
        linkage: ["", "--shared", "--lto"]
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    # Volatile cache
    - name: ccache
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key:          ccache03-${{ runner.os }}-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.linkage }}-build-${{ github.sha }}
        restore-keys: ccache03-${{ runner.os }}-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.linkage }}-build-
    # Less volatile cache
    - name: data cache
      uses: actions/cache@v2
      with:
        path: build/data/data/txt
        key:          data-${{ hashFiles('build/data/data/txt/**/*') }}
        restore-keys: data-${{ hashFiles('build/data/data/txt/**/*') }}
#    - name: deps cache
#      uses: actions/cache@v2
#      with:
#        path: build/deps/dload
#        key:          deps-${{ hashFiles('build/deps/dload/*') }}
#        restore-keys: deps-${{ hashFiles('build/deps/dload/*') }}
    - name: prepare environment
      run: util/prep-env.sh
    - name: set apt conf
      run: ${{env.APT_SET_CONF}}
    - name: install dependencies
      run: util/deps-pull.sh
    - name: build & install the unmanaged dependencies
      run: util/deps-build.sh
    - name: build
      run: ./ci-default --compiler ${{ matrix.compiler }} ${{ matrix.linkage }} --unity --build-qt
    - name: run demo
      run: ./ci-default --compiler ${{ matrix.compiler }} ${{ matrix.linkage }} --unity --build-qt --run-demo
# It doesn't make sense for now, since we're not linking Boost statically yet.
#    - uses: actions/upload-artifact@v2
#      if: ${{ matrix.compiler == 'gcc' && matrix.linkage == '--lto' }}
#      with:
#        name: tsqsim-${{ matrix.os }}
#        path: /home/runner/work/tsqsim/tsqsim/build/${{ matrix.compiler }}-static-release/bin/*
# TODO: todos sorted by priority*realism:
# TODO: All the unmaintained denendencies should have their own CMakeLists.txt file (URT. Others?) and the util/deps-build.sh should not be used, if possible.
# TODO: All the testing should be done in a separate job, AFTER building and downloading resources, in order to use caches better (short and easy. Needs to have the build scripts restructured - separate building and testing)


  build-windows:
    runs-on: windows-latest
    env:
      CCACHE_TEMPDIR: C:\Users\runneradmin\.ccache-temp
      CCACHE_DIR: C:\Users\runneradmin\.ccache
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    # Volatile cache
    - name: ccache
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key:          ccache03-${{ runner.os }}-build-${{ github.sha }}
        restore-keys: ccache03-${{ runner.os }}-build-
    # Less volatile cache
    - name: data cache
      uses: actions/cache@v2
      with:
        path: build/data/data/txt
        key:          data-${{ hashFiles('build/data/data/txt/**/*') }}
        restore-keys: data-${{ hashFiles('build/data/data/txt/**/*') }}
    - uses: eine/setup-msys2@v2
      with:
        update: false # TODO: Switch to true for master
        release: false # TODO: Switch to true for Master
        install: mingw-w64-x86_64-toolchain make mingw-w64-x86_64-cmake mingw-w64-x86_64-ccache mingw-w64-x86_64-gnuplot mingw-w64-x86_64-eigen3 mingw-w64-x86_64-unittest-cpp mingw-w64-x86_64-boost mingw-w64-x86_64-gsl mingw-w64-x86_64-wxWidgets mingw-w64-x86_64-winpthreads-git git # mingw-w64-x86_64-openssl mingw-w64-x86_64-zeromq
    - name: prepare environment
      run: util/prep-env.sh
# TODO: Use python later
    - name: install dependencies
      run: util/deps-pull.sh
    - name: build & install the unmanaged dependencies
      run: util/deps-build.sh
    - name: build
      run: ./ci-default --unity
    - name: run demo
      run: ./ci-default --unity --run-demo       
# TODO: Make a separate package from GNUPLOT variable
    - name: prep minimal
      run: |
        ls /mingw64/bin
        libs="libwinpthread-1.dll libstdc++-6.dll libgcc_s_seh-1.dll libboost_program_options-mt.dll libboost_serialization-mt.dll libboost_system-mt.dll libboost_filesystem-mt.dll libboost_date_time-mt.dll libboost_iostreams-mt.dll libbz2-1.dll liblzma-5.dll libzstd.dll zlib1.dll"
        for token in ${libs}; do
           cp -v /mingw64/bin/"$token" ${{env.WIN_INSTALL_PATH}}
        done
    - uses: actions/upload-artifact@v2
      with:
        name: tsqsim-Windows-minimal
        path: |
          ${{env.WIN_INSTALL_PATH}}/tsqsim.exe
          ${{env.WIN_INSTALL_PATH}}/*.dll
          !${{env.WIN_INSTALL_PATH}}/lib/*
          !${{env.WIN_INSTALL_PATH}}/data/data/bin/*
          !${{env.WIN_INSTALL_PATH}}/cfg/configTxt.txt
    - name: prep full
      run: |
        GNUPLOT="gnuplot.exe libbrotlicommon.dll libbrotlidec.dll libbrotlienc.dll rav1e.dll libx265.dll libLerc.dll libjbig-0.dll libgmodule-2.0-0.dll libexpat-1.dll libdeflate.dll libde265-0.dll libdatrie-1.dll libdav1d.dll libbrotlidec.dll libaom.dll libffi-7.dll libpcre-1.dll libintl-8.dll libavif.dll libheif.dll libiconv-2.dll imagequant.dll libwebp-7.dll libthai-0.dll libgio-2.0-0.dll libtermcap-0.dll libjpeg-8.dll libpng16-16.dll libtiff-5.dll libfreetype-6.dll imagequant.dll libavif.dll libgd.dll libheif.dll libjpeg-8.dll libpangocairo-1.0-0.dll libpangoft2-1.0-0.dll libpangowin32-1.0-0.dll libreadline8.dll libtermcap-0.dll libtiff-5.dll libwebp-7.dll libXpm-noX4.dll libfontconfig-1.dll libreadline8.dll libgobject-2.0-0.dll libgd.dll libpango-1.0-0.dll libpangocairo-1.0-0.dll libpangoft2-1.0-0.dll libpangowin32-1.0-0.dll libharfbuzz-0.dll libharfbuzz-gobject-0.dll libharfbuzz-icu-0.dll libharfbuzz-subset-0.dll libgraphite2.dll libfribidi-0.dll libcairo-2.dll libcairo-gobject-2.dll libcairo-script-interpreter-2.dll libpixman-1-0.dll liblzo2-2.dll libglib-2.0-0.dll libcerf.dll libcaca-0.dll"
        WX="wxbase30u_gcc_custom.dll wxmsw30u_core_gcc_custom.dll"
        libs="$GNUPLOT $WX"
        for token in ${libs}; do
           cp -v /mingw64/bin/"$token" ${{env.WIN_INSTALL_PATH}}
        done
# libjpeg-8.dll libpng16-16.dll libtiff-5.dll 
    - uses: actions/upload-artifact@v2
      with:
        name: tsqsim-Windows
        path: |
          ${{env.WIN_INSTALL_PATH}}/*
          !${{env.WIN_INSTALL_PATH}}/lib/*
          !${{env.WIN_INSTALL_PATH}}/data/data/bin/*
          !${{env.WIN_INSTALL_PATH}}/cfg/configTxt.txt


