name: ci/gh-actions/cli

on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

# The below variables reduce repetitions across similar targets
env:
  REMOVE_BUNDLED_BOOST : rm -rf /usr/local/share/boost
  APT_INSTALL_LINUX: 'sudo apt -y install build-essential cmake ccache gnuplot libssl-dev libeigen3-dev libunittest++-dev libgsl-dev libarmadillo-dev libboost-system-dev libboost-filesystem-dev libboost-iostreams-dev libboost-serialization-dev libboost-program-options-dev libboost-date-time-dev'
  APT_SET_CONF: |
        echo "Acquire::Retries       \"3\";"   | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::http::Timeout \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom
        echo "Acquire::ftp::Timeout  \"120\";" | sudo tee -a /etc/apt/apt.conf.d/80-custom

jobs:
  build-ubuntu:
    runs-on: ${{ matrix.os }}
    env:
      CCACHE_COMPRESS: 1
      CCACHE_TEMPDIR: /tmp/.ccache-temp
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] #, ubuntu-18.04]
        compiler: [gcc, clang]
        cmake-opts: [USE_STATIC, ""]
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    # Volatile cache
    - name: ccache
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ccache01-${{ runner.os }}-${{ matrix.os }}-build-${{ github.sha }}
        restore-keys: ccache01-${{ runner.os }}-${{ matrix.os }}-build-
    # Less volatile cache
    - name: data cache
      uses: actions/cache@v2
      with:
        path: build/data/data/txt
        key: data-${{ hashFiles('build/data/data/txt/**/*') }}
        restore-keys: data-${{ hashFiles('build/data/data/txt/**/*') }}
    - name: set apt conf
      run: ${{env.APT_SET_CONF}}
    - name: apt update
      run: sudo apt update
    - name: install dependencies
      run: ${{env.APT_INSTALL_LINUX}}
    - name: build & install the unmanaged dependencies
      run: util/build-deps.sh
    - name: prepare environment
      run: util/prep-env.sh
    - name: build
      run: util/ci-${{ matrix.compiler }}.sh ${{ matrix.cmake-opts }}
    - name: run demo
      run: util/run-demo.sh ${{ matrix.compiler }}

# TODO: todos sorted by priority:
# TODO: All the testing should be done in a separate job, AFTER building and downloading resources, in order to use caches better (short and easy. Needs to have the build scripts restructured - separate building and testing)
# TODO: Add OSX build.	   Problem: stdfwd.hh has to be conditionally disabled for _APPLE_ (huge but simple)
# TODO: Add Windows build. Problem: EnjoLibBoost fails to compile without wstring (short but harder)


